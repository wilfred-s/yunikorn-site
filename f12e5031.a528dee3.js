(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{194:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),o=n(6),i=(n(0),n(202)),r={id:"resource_quota_management",title:"Resource Quota Management"},u={unversionedId:"user_guide/resource_quota_management",id:"user_guide/resource_quota_management",isDocsHomePage:!1,title:"Resource Quota Management",description:"\x3c!--",source:"@site/docs/user_guide/resource_quota_mgmt.md",slug:"/user_guide/resource_quota_management",permalink:"/docs/next/user_guide/resource_quota_management",version:"current",sidebar:"docs",previous:{title:"ACLs",permalink:"/docs/next/user_guide/acls"},next:{title:"Gang Scheduling",permalink:"/docs/next/user_guide/gang_scheduling"}},c=[{value:"Quota configuration and rules",id:"quota-configuration-and-rules",children:[]},{value:"Converting Kubernetes resources and quotas",id:"converting-kubernetes-resources-and-quotas",children:[]},{value:"Kubernetes and YuniKorn quota interaction",id:"kubernetes-and-yunikorn-quota-interaction",children:[]},{value:"Static queue definition",id:"static-queue-definition",children:[{value:"Goal",id:"goal",children:[]},{value:"Configuration",id:"configuration",children:[]},{value:"Run a workload",id:"run-a-workload",children:[]}]},{value:"Namespace to queue mapping",id:"namespace-to-queue-mapping",children:[{value:"Goal",id:"goal-1",children:[]},{value:"Configuration",id:"configuration-1",children:[]},{value:"Namespace quota",id:"namespace-quota",children:[]},{value:"Run a workload",id:"run-a-workload-1",children:[]}]},{value:"Parent queue mapping for namespaces",id:"parent-queue-mapping-for-namespaces",children:[{value:"Goal",id:"goal-2",children:[]},{value:"Configuration",id:"configuration-2",children:[]},{value:"Namespace parent queue",id:"namespace-parent-queue",children:[]},{value:"Run a workload",id:"run-a-workload-2",children:[]}]}],s={rightToc:c};function l(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"quota-configuration-and-rules"},"Quota configuration and rules"),Object(i.b)("p",null,"YuniKorn can offer a finer grained resource quota management setup compared to the simple namespace resource quota provided by Kubernetes."),Object(i.b)("p",null,"On Kubernetes a pod must fit into the namespace quota when the pod is submitted.\nIf the pod does not fit in the namespace quota the pod is rejected.\nThe client must implement a retry-mechanism and re-submit the pod if it needs the pod to be scheduled."),Object(i.b)("p",null,"Contrary to quotas in Kubernetes YuniKorn does not enforce quotas on submission but only on actively consumed resources.\nTo explain the difference: when using YuniKorn for quota enforcement a new pod submitted to Kubernetes is always accepted.\nYunikorn will queue the pod without counting the queued pod's resources towards the consumed quota.\nWhen YuniKorn tries to schedule the pod it checks at scheduling time if the pod fits in the quota configured for the queue the pod is assigned to.\nIf at that point the pod does not fit in the quota the pod is skipped and not counted in the resource consumption.\nThis means that until a scheduling attempt of a pod is successful a pod it is not consuming resources in the YuniKorn quota system."),Object(i.b)("p",null,"Resource quotas in YuniKorn are linked to the queue and its place in the queue hierarchy.\nThe base of the queue structure, the ",Object(i.b)("inlineCode",{parentName:"p"},"root")," queue, does not allow setting a quota as it reflects the current size of the cluster.\nNode additions and removals update the ",Object(i.b)("inlineCode",{parentName:"p"},"root")," queue quota automatically."),Object(i.b)("p",null,"Beside the ",Object(i.b)("inlineCode",{parentName:"p"},"root")," queue the quotas can be set, and is enforced, at any point in the hierarchy.\nEvery queue can have a quota set. The quota is enforced recursively throughout the hierarchy.\nThis means that a child queue can never use more resources than the ",Object(i.b)("strong",{parentName:"p"},"configured")," quota of the parent queue.\nSetting a quota on a child queue larger than its parent queue's quota would thus not have any effect and is handled as a configuration error."),Object(i.b)("p",null,"In the hierarchy there are some further rules that need to be considered.\nIf a parent queue has multiple children the sum of the ",Object(i.b)("strong",{parentName:"p"},"usage")," of all children combined can never exceed the quota ",Object(i.b)("strong",{parentName:"p"},"configured")," on the parent.\nHowever, from a configuration perspective this does not mean that the sum of the ",Object(i.b)("strong",{parentName:"p"},"configured")," quotas for all children must be smaller than the parent quota."),Object(i.b)("p",null,Object(i.b)("img",{alt:"Queue Quota",src:n(325).default})),Object(i.b)("p",null,"As an example the ",Object(i.b)("inlineCode",{parentName:"p"},"root.parent")," queue has a quota of 900.\nIt contains three child queues, two with a quota set.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"root.parent.child1")," has no quota set and will thus be limited to the ",Object(i.b)("inlineCode",{parentName:"p"},"root.parent")," quota.\nThe two other queues ",Object(i.b)("inlineCode",{parentName:"p"},"root.parent.child2")," and ",Object(i.b)("inlineCode",{parentName:"p"},"root.parent.child3")," each have a quota of 750 set.\nDuring normal operation the total usage of the 3 child queues together will be 900.\nThe applications running in each child queue have a demand of more than 1000 each.  "),Object(i.b)("p",null,"Distribution in that case could be any of:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"all 900 used by just the ",Object(i.b)("inlineCode",{parentName:"li"},"child1")," queue"),Object(i.b)("li",{parentName:"ul"},"spread out evenly over the 3 queues (300 by each)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"child2")," maxed out using 750, and the left over 150 used by ",Object(i.b)("inlineCode",{parentName:"li"},"child3"),"  ")),Object(i.b)("p",null,"The exact distribution between the queues will fluctuate and is dependent on the scheduling policies."),Object(i.b)("h2",{id:"converting-kubernetes-resources-and-quotas"},"Converting Kubernetes resources and quotas"),Object(i.b)("p",null,"Resource support for pods is limited to the resources specified as part of the ",Object(i.b)("em",{parentName:"p"},"requests")," specification:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"cpu")," is mapped to ",Object(i.b)("em",{parentName:"li"},"vcore")," with the value in milli cpu."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"memory")," is mapped to ",Object(i.b)("em",{parentName:"li"},"memory")," with the value in MB (1 MB = 10^6 B = 1 000 000 B)."),Object(i.b)("li",{parentName:"ul"},"all other resources are mapped as provided.")),Object(i.b)("p",null,"Extended resource as per the ",Object(i.b)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"},"Kubernetes documentation")," are supported."),Object(i.b)("p",null,"Example pod with a single container:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nspec:\n  containers:\n  - name: container-1\n    resources:\n      requests:\n        cpu: "250m"\n        memory: "1Gi"\n        hugepages-1Gi: "1"\n')),Object(i.b)("p",null,"The above specification will set pod resources request for scheduling in YuniKorn to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"vcore")," -> 250"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"memory")," -> 1074"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"hugepages-1Gi")," -> 1")),Object(i.b)("p",null,"Two remarks:",Object(i.b)("br",{parentName:"p"}),"\n","Multiple container specifications will be aggregated into one total pod resource request automatically.",Object(i.b)("br",{parentName:"p"}),"\n","All memory is reported in MB with unit conversions applied where needed. "),Object(i.b)("p",null,"In the case that static queue definitions are used for a queue there is no limit on the type of resource that can be specified in a quota.\nQuota annotations on namespaces, used as part of the automatic queue creation, are limited to the equivalent ",Object(i.b)("em",{parentName:"p"},"cpu")," and ",Object(i.b)("em",{parentName:"p"},"memory")," resources.\nSee the ",Object(i.b)("a",{parentName:"p",href:"#Namespace-quota"},"setup")," below for the annotations on the namespace for quotas."),Object(i.b)("h2",{id:"kubernetes-and-yunikorn-quota-interaction"},"Kubernetes and YuniKorn quota interaction"),Object(i.b)("p",null,"The recommendation is to turn off, not configure, the Kubernetes Namespace quotas.\nUsing only YuniKorn queue quotas provides a more flexible setup and allows queueing of workloads.  "),Object(i.b)("p",null,"In a setup that has both YuniKorn and Kubernetes quotas turned on consider the following points:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Two separate configurations need to be maintained.\nThis increases the maintenance burden, and the possibility of configuration mistakes."),Object(i.b)("li",{parentName:"ul"},"Both quotas will be enforced.")),Object(i.b)("p",null,"Having both quotas turned on can lead to unexpected behaviour.\nThe main issue is the fact that the Kubernetes namespace quota is enforced on submit.\nThere are three combinations of quota configuration that are possible.\nThe 3 combinations could have two effects when used in combination with the YuniKorn quota."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Both quotas are ",Object(i.b)("em",{parentName:"li"},"equal"),": workloads will not be queued, the full configured quota can be used.  ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Maximum usage and queueing will be limited to the set quota"))),Object(i.b)("li",{parentName:"ol"},"Kubernetes quota is ",Object(i.b)("em",{parentName:"li"},"lower")," than YuniKorn: the YuniKorn quota will never be reached and workloads will not be queued.   ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Maximum usage will be limited to the Kubernetes quota."))),Object(i.b)("li",{parentName:"ol"},"Kubernetes quota is ",Object(i.b)("em",{parentName:"li"},"higher")," than YuniKorn: YuniKorn will limit the usage to the quota set in YuniKorn.\nThe Kubernetes quota will be enforced on submit and thus set the limit for the workload that can be queued on top of the YuniKorn quota.  ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Maximum usage will be limited to the YuniKorn quota."),Object(i.b)("li",{parentName:"ul"},"Workload queueing will be limited to the Kubernetes quota.")))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"The following configuration examples are just to demonstrate the format needed\nto create a queue hierarchy with quotas set."))),Object(i.b)("h2",{id:"static-queue-definition"},"Static queue definition"),Object(i.b)("h3",{id:"goal"},"Goal"),Object(i.b)("p",null,"A preconfigured hierarchy of queues with a maximum and guaranteed capacity.\nThe users can only submit applications to the leaf queues.\nThis approach manages the resource capacity for each of the queues, which is suitable to the scenarios that queues do not change too often."),Object(i.b)("h3",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"Apply the following configuration to YuniKorn's configmap to:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"setup 3 queues under ",Object(i.b)("inlineCode",{parentName:"li"},"root")),Object(i.b)("li",{parentName:"ul"},"each queue has a specific guaranteed and maximum capacity"),Object(i.b)("li",{parentName:"ul"},"anyone can submit to any queue")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"partitions:\n  - name: default\n    queues:\n      - name: root\n        submitacl: '*'\n        queues:\n          - name: advertisement\n            resources:\n              guaranteed:\n                memory: 500000\n                vcore: 50000\n              max:\n                memory: 800000\n                vcore: 80000\n          - name: search\n            resources:\n              guaranteed:\n                memory: 400000\n                vcore: 40000\n              max:\n                memory: 600000\n                vcore: 60000\n          - name: sandbox\n            resources:\n              guaranteed:\n                memory: 100000\n                vcore: 10000\n              max:\n                memory: 100000\n                vcore: 10000\n")),Object(i.b)("h3",{id:"run-a-workload"},"Run a workload"),Object(i.b)("p",null,"In order to run applications in specific queues, you will need to set the following labels in all pod specs.\nAll pods with the same ",Object(i.b)("inlineCode",{parentName:"p"},"applicationID")," label are considered ti be one application.\nIn the below example the application ",Object(i.b)("inlineCode",{parentName:"p"},"my-test-app")," will run in the queue ",Object(i.b)("inlineCode",{parentName:"p"},"root.sandbox"),": "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'labels:\n  app: my-test-app\n  applicationId: "my-test-app-01"\n  queue: root.sandbox\n')),Object(i.b)("h2",{id:"namespace-to-queue-mapping"},"Namespace to queue mapping"),Object(i.b)("h3",{id:"goal-1"},"Goal"),Object(i.b)("p",null,"Automatically map a Kubernetes ",Object(i.b)("inlineCode",{parentName:"p"},"namespace")," to a queue in YuniKorn.\nThe user creates the required namespaces in Kubernetes.\nThe YuniKorn k8s shim and core scheduler automatically pass the required information and map the namespace to a queue, creating the queue if it does not exist.\nThe resource quota will be managed by YuniKorn instead of using the Kubernetes namespace quota.\nThis does require the namespaces to be setup without Kubernetes quota enforcement and tags as per the ",Object(i.b)("a",{parentName:"p",href:"#Namespace-quota"},"setup")," below."),Object(i.b)("h3",{id:"configuration-1"},"Configuration"),Object(i.b)("p",null,"Apply the following configuration to YuniKorn's configmap:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"partitions:\n  - name: default\n    placementrules:\n      - name: tag\n        value: namespace\n        create: true\n    queues:\n      - name: root\n        submitacl: '*'\n        properties:\n          application.sort.policy: stateaware\n")),Object(i.b)("p",null,"This configuration places an application based on the ",Object(i.b)("inlineCode",{parentName:"p"},"tag")," rule.\nThe tag selected is the ",Object(i.b)("inlineCode",{parentName:"p"},"namespace")," tag which is automatically added by the k8s shim to all applications that get created.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"create")," flag is set to true which will trigger the creation of the queue with the same name as the namespace if it does not exist. "),Object(i.b)("p",null,"Applications within the automatically created child queues will be sorted based sorting policy set on the parent queue.\nIn this case the property ",Object(i.b)("inlineCode",{parentName:"p"},"application.sort.policy")," is in this configuration set to ",Object(i.b)("inlineCode",{parentName:"p"},"stateaware"),".\nThis is a simple app sorting policy applicable for batch jobs, you can find more document ",Object(i.b)("a",{parentName:"p",href:"/docs/next/user_guide/sorting_policies#StateAwarePolicy"},"here"),"."),Object(i.b)("p",null,"You can change the configuration using the helm charts during the installation by overwriting the configuration in the\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/apache/incubator-yunikorn-release/blob/master/helm-charts/yunikorn/values.yaml#L71-L81"},"helm chart template"),"."),Object(i.b)("h3",{id:"namespace-quota"},"Namespace quota"),Object(i.b)("p",null,"Namespaces in Kubernetes contain the quota information.\nIf a quota is set on a namespace Kubernetes will automatically enforce the quota.\nIn the case that YuniKorn is used for quota enforcement no quota must be set on the namespace."),Object(i.b)("p",null,"To allow specifying a quota on the namespace the following annotations should be set in the namespace object:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'yunikorn.apache.org/namespace.max.cpu: "64"\nyunikorn.apache.org/namespace.max.memory: "100Gi"\n')),Object(i.b)("p",null,"YuniKorn will parse these annotations and set the maximum capacity of the queue mapped to this namespace.\nThe values specified follow the standard Kubernetes formatting and unit specification.\nCurrently, we only support mapping memory and cpu not other resource types."),Object(i.b)("p",null,"The example above will limit the queue mapped to the annotated namespace to 64 CPUs and 100GB memory."),Object(i.b)("h3",{id:"run-a-workload-1"},"Run a workload"),Object(i.b)("p",null,"Applications, and the pods that are part of the application, can be submitted without specific labels.\nYuniKorn will automatically add the required tags.\nThe configured placement rule will create the queue, if required, and add the application to the queue."),Object(i.b)("p",null,"For example, if an application is submitted to namespace ",Object(i.b)("inlineCode",{parentName:"p"},"development"),", then the application will run in the ",Object(i.b)("inlineCode",{parentName:"p"},"root.development")," queue."),Object(i.b)("h2",{id:"parent-queue-mapping-for-namespaces"},"Parent queue mapping for namespaces"),Object(i.b)("h3",{id:"goal-2"},"Goal"),Object(i.b)("p",null,"Though the tag placement rule using the ",Object(i.b)("inlineCode",{parentName:"p"},"namespace")," tag is capable of placing an application in a queue this might not be enough in all setups.\nIn some cases, multi tenancy for example, namespaces need to be grouped together.\nAdministrators could annotate namespaces which allows dynamic placement of applications based on multiple annotations if placement rules were setup.\nYuniKorn cannot and does not just add all annotations from a namespace to an application."),Object(i.b)("p",null,"To help support this grouping case a parent queue can be tagged on a namespace.   "),Object(i.b)("h3",{id:"configuration-2"},"Configuration"),Object(i.b)("p",null,"The configuration for this functionality consists of two pieces:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"the mapping rule"),Object(i.b)("li",{parentName:"ol"},"the namespace annotation")),Object(i.b)("p",null,"First we set the following configuration to YuniKorn's configmap:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"partitions:\n  - name: default\n    placementrules:\n    - name: tag\n      value: namespace\n      create: true\n      parent:\n      - name: tag\n        value: namespace.parentqueue\n    queues:\n    - name: root\n      queues:\n      - name: production\n      - name: development\n")),Object(i.b)("p",null,"The configuration used for the namespace to queue mapping is the same as ",Object(i.b)("a",{parentName:"p",href:"#Namespace-to-queue-mapping"},"above"),".\nAs an extension to the placement rule a ",Object(i.b)("inlineCode",{parentName:"p"},"parent")," rule is added to support the grouping.\nThe parent rule is used to generate the parent, or the queue above, in the hierarchy.\nThe rule uses the tag ",Object(i.b)("inlineCode",{parentName:"p"},"namespace.parentqueue")," from the application to generate the parent queue name.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"namespace.parentqueue")," tag is automatically added by the Kubernetes shim but does require a namespace annotation (see below)."),Object(i.b)("p",null,"In the example rule configuration given the ",Object(i.b)("inlineCode",{parentName:"p"},"create")," flag is not set on the parent rule.\nThis means that the parent queue must exist in the configuration otherwise the application submit will fail.\nFor the example configuration this means supported values for the parent are thus limited to ",Object(i.b)("inlineCode",{parentName:"p"},"production")," and ",Object(i.b)("inlineCode",{parentName:"p"},"development"),"."),Object(i.b)("p",null,"Quotas cannot be set on the parent queue using any of these mappings.\nThe quota linked to the namespace is set on the namespace queue not the parent  as per the namespace mapping provided earlier."),Object(i.b)("p",null,"Parent queue quotas must always be set directly in the configuration.\nThis requires the ",Object(i.b)("inlineCode",{parentName:"p"},"create")," flag to be set to ",Object(i.b)("inlineCode",{parentName:"p"},"false")," on the parent rule."),Object(i.b)("h3",{id:"namespace-parent-queue"},"Namespace parent queue"),Object(i.b)("p",null,"Contrary to the namespace name itself, and inline with the quota settings, the namespaces need to be annotated to use the parent queue mapping.\nNamespace names must be unique in Kubernetes which is not affected by this annotation.\nThe same annotation value may be used for multiple namespaces:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"yunikorn.apache.org/parentqueue: root.production\n")),Object(i.b)("p",null,"The example annotation above will map the parent queue to the existing ",Object(i.b)("inlineCode",{parentName:"p"},"root.production")," queue.\nNote that the rule will fully qualify the name if needed, you can thus omit the ",Object(i.b)("inlineCode",{parentName:"p"},"root.")," part in the annotation.\nIf the annotation starts with ",Object(i.b)("inlineCode",{parentName:"p"},"root.")," the system assumes it is a fully qualified queue name."),Object(i.b)("p",null,"To complete the picture here is an image that shows the mapping from Kubernetes namespaces to queues in YuniKorn.\nIt uses the annotations on the namespaces in Kubernetes as described, and the example configuration for the mapping rules.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"finance")," and ",Object(i.b)("inlineCode",{parentName:"p"},"sales")," namespaces become queues grouped under the parent queue ",Object(i.b)("inlineCode",{parentName:"p"},"production"),".\nThe namespaces ",Object(i.b)("inlineCode",{parentName:"p"},"dev")," and ",Object(i.b)("inlineCode",{parentName:"p"},"test")," are placed under the ",Object(i.b)("inlineCode",{parentName:"p"},"development")," parent queue.   "),Object(i.b)("p",null,Object(i.b)("img",{alt:"Queue Quota",src:n(326).default})),Object(i.b)("h3",{id:"run-a-workload-2"},"Run a workload"),Object(i.b)("p",null,"Applications, and the pods that are part of the application, can be submitted without specific labels or changes.\nYuniKorn will add the tags, the placement rules will do the rest.\nThe configured placement rule will create the queues, if required, and add the application to the queue."),Object(i.b)("p",null,"Since the namespace ",Object(i.b)("inlineCode",{parentName:"p"},"finance")," is annotated with the example value, and the rules are in place.\nApplications in the ",Object(i.b)("inlineCode",{parentName:"p"},"finance")," namespace will run in the ",Object(i.b)("inlineCode",{parentName:"p"},"root.production.finance")," queue that is created dynamically."))}l.isMDXComponent=!0},202:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),l=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=l(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,d=p["".concat(r,".").concat(m)]||p[m]||b[m]||i;return n?o.a.createElement(d,u(u({ref:t},s),{},{components:n})):o.a.createElement(d,u({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,r[1]=u;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},325:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/queue-resource-quotas-02ec11ddedad1f2057bbc4d3ef1c900a.png"},326:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/namespace-mapping-703b2384a21c2e401291fbb49acdb1f4.png"}}]);